% Lemur
@inproceedings{10.1145/3386367.3431292,
title = {Meeting SLOs in Cross-Platform NFV},
author = {Jane* Yen and Jianfeng* Wang and Sucha Supittayapornpong and Marcos A M Vieira and Ramesh Govindan and Barath Raghavan},
url = {https://doi.org/10.1145/3386367.3431292},
code = {https://github.com/USC-NSL/Lemur},
slides = {https://nsl.usc.edu/wp-content/uploads/2020/11/CoNEXT20-Lemur-slides.pdf},
isbn = 9781450379489,
year  = 2020,
date = {2020-01-01},
booktitle = {Proceedings of the 16th International Conference on Emerging Networking EXperiments and Technologies},
pages = {509‚Äì523},
publisher = {Association for Computing Machinery},
address = {Barcelona, Spain},
series = {CoNEXT '20},
abstract = {Network Functions (NFs) perform on-path processing of network traffic. ISPs are deploying NF Virtualization (NFV) with software NFs run on commodity servers. ISPs aim to ensure that NF chains, directed acyclic graphs of NFs, do not violate Service Level Objectives (SLOs) promised by the ISP to its customers. To meet SLOs, NFV systems sometimes leverage on-path hardware (such as programmable switches and smart NICs) to accelerate NF execution.Lemur places and executes NF chains across heterogeneous hardware while meeting SLOs. Lemur's novel placement algorithm yields an SLO-satisfying NF placement while weighing many constraints: hardware memory and processing stages, server cores, link capacity, NF profiles, and NF chain interactions. Lemur's metacompiler automatically generates code and rules (in P4, Python, eBPF, C++, and OpenFlow) to stitch cross-platform NF chain execution while also optimizing resource usage. Our experiments show that Lemur is alone among competing strategies in meeting SLOs for canonical NF chains while maximizing marginal throughput (the traffic rate in excess of the service-level objective).},
keywords = {NFV, nsl, PISA switch, service chain},
abbr = {ACM CoNEXT},
pubstate = {published},
tppubtype = {inproceedings}
}

% Galleon
@inproceedings{arxiv21-galleon,
title={Galleon: Reshaping the Square Peg of NFV}, 
author={Jianfeng Wang and Tam√°s L√©vai and Zhuojin Li and Marcos A. M. Vieira and Ramesh Govindan and Barath Raghavan},
url = {https://arxiv.org/abs/2101.06466},
year={2021},
date = {2021-01-16},
booktitle = {CoRR Jan},
publisher = {arXiv preprint arXiv:2101.06466},
abstract = {Software is often used for Network Functions (NFs) -- such as firewalls, NAT, deep packet inspection, and encryption -- that are applied to traffic in the network. The community has hoped that NFV would enable rapid development of new NFs and leverage commodity computing infrastructure. However, the challenge for researchers and operators has been to align the square peg of high-speed packet processing with the round hole of cloud computing infrastructures and abstractions, all while delivering performance, scalability, and isolation. Past work has led to the belief that NFV is different enough that it requires novel, custom approaches that deviate from today's norms. To the contrary, we show that we can achieve performance, scalability, and isolation in NFV judiciously using mechanisms and abstractions of FaaS, the Linux kernel, NIC hardware, and OpenFlow switches. As such, with our system Galleon, NFV can be practically-deployable today in conventional cloud environments while delivering up to double the performance per core compared to the state of the art.},
keywords = {NFV, cloud computing, SLO},
abbr = {ArXiv},
pubstate = {published},
tppubtype = {inproceedings}
}

% Quadrant
@inproceedings{socc22-quadrant,
title={Quadrant: A Cloud-Deployable NF Virtualization Platform},
author={Jianfeng Wang and Tam√°s L√©vai and Zhuojin Li and Marcos A. M. Vieira and Ramesh Govindan and Barath Raghavan},
url = {https://dl.acm.org/doi/10.1145/3542929.3563471},
slides = {https://acmsocc.org/2022/assets/slides/59.pdf},
talk={https://youtu.be/70_bUua5870},
year={2022},
date = {2022-11-07},
booktitle = {SoCC '22: Proceedings of the ACM Symposium on Cloud Computing},
abstract = {Network Functions (NFs) now touch a significant fraction of Internet traffic. The hope has been that software-based NF Virtualization (NFV) would enable rapid development of new NFs by vendors and leverage the power and economics of commodity computing infrastructure for NF deployment. To date, no cloud NFV systems achieve NF chaining, isolation, SLO-adherence, and scaling together with existing cloud computing infrastructure and abstractions, all while achieving generality, speed, and ease of deployment; these properties are taken for granted in other cloud contexts but unavailable for NF processing. We present Quadrant, an efficient and secure cloud-deployable NFV system, and show that Quadrant‚Äôs approach of adapting existing cloud infrastructure to support packet processing can achieve NF chaining, isolation, generality, and performance in NFV. Quadrant reuses common cloud infrastructure such as Kubernetes, cloud functions, the Linux kernel, NIC hardware, and switches. It enables easy NFV deployment while delivering up to double the performance per core compared to the state of the art.},
keywords = {NFV, cloud computing, SLO},
abbr = {ACM SoCC},
pubstate = {published},
tppubtype = {inproceedings}
}

% ironside
@inproceedings{ironside,
title={Ironside: Microsecond-scale Latency SLOs for Network Function Chains},
author={Jianfeng Wang and Siddhant Gupta and Marcos A. M. Vieira and Ramesh Govindan and Barath Raghavan},
year={2022},
date = {2022-10-20},
abstract = {Network Function Virtualization (NFV) replaces hardware middleboxes with software-based Network Functions (NFs). To date, no NFV systems demonstrate the ability of meeting microsecond-scale latency SLOs under real traffic efficiently. Prior work has led to the belief that for a service chain, every CPU core must prepare for the worst-case delay. A large number of cores need to be provisioned to reduce latency, notably as the target latency approaches the microsecond scale. Our analysis on real-world traces shows that today‚Äôs auto-scaling or load-balancing mechanisms cannot achieve microsecond-scale tail latency SLOs due to two types of traffic bursts. We present Ironside, a NFV scheduler that detects and processes bursts efficiently and timely. Ironside schedules NF tasks to control queueing effects at hardware and software queues with packet-level traffic statistics. To achieve high efficiency, Ironside supports fine-grained core reallocation, and introduces auxiliary cores for handling transient bursts rather than over-provisioning. Our evaluation shows that: compared to state-of-the-art NFV auto-scaling and load-balancing approaches, Ironside is able to meet 100s-ùúás latency SLOs (up to 30√ó improvements compared to other NFV systems).},
keywords = {NFV, cloud computing, SLO},
booktitle = {CoRR Oct},
pubstate = {under submission},
abbr = {ArXiv},
tppubtype = {inproceedings}
}
