@inproceedings{10.1145/3472305.3472314,
title = {Tools for Disambiguating RFCs},
author = {Jane Yen and Ramesh Govindan and Barath Raghavan},
url = {https://doi.org/10.1145/3472305.3472314},
doi = {10.1145/3472305.3472314},
isbn = {9781450386180},
year  = {2021},
date = {2021-07-24},
urldate = {2021-07-24},
booktitle = {Proceedings of the Applied Networking Research Workshop},
pages = {85–91},
publisher = {Association for Computing Machinery},
address = {Virtual Event, USA},
series = {ANRW '21},
abstract = {For decades, drafting Internet protocols has taken significant amounts of human supervision
due to the fundamental ambiguity of natural language. Given such ambiguity, it is
also not surprising that protocol implementations have long exhibited bugs. This pain
and overhead can be significantly reduced with the help of natural language processing
(NLP).We recently applied NLP to identify ambiguous or under-specified sentences in
RFCs, and to generate protocol implementations automatically when the ambiguity is
clarified. However this system is far from general or deployable. To further reduce
the overhead and errors due to ambiguous sentences, and to improve the generality
of this system, much work remains to be done. In this paper, we consider what it would
take to produce a fully-general and useful system for easing the natural-language
challenges in the RFC process.},
keywords = {natural language, protocol specifications},
abbr = {ANRW},
pubstate = {published},
tppubtype = {inproceedings}
}

@inproceedings{10.1145/3452296.3472910,
title = {Semi-Automated Protocol Disambiguation and Code Generation},
author = {Jane Yen and Tamás Lévai and Qinyuan Ye and Xiang Ren and Ramesh Govindan and Barath Raghavan},
url = {https://doi.org/10.1145/3452296.3472910},
code = {https://github.com/USC-NSL/sage},
isbn = {9781450383837},
year  = {2021},
date = {2021-01-01},
urldate = {2021-01-01},
booktitle = {Proceedings of the 2021 ACM SIGCOMM 2021 Conference},
pages = {272–286},
publisher = {Association for Computing Machinery},
address = {Virtual Event, USA},
series = {SIGCOMM '21},
abstract = {For decades, Internet protocols have been specified using natural language. Given
the ambiguity inherent in such text, it is not surprising that protocol implementations
have long exhibited bugs. In this paper, we apply natural language processing (NLP)
to effect semi-automated generation of protocol implementations from specification
text. Our system, Sage, can uncover ambiguous or under-specified sentences in specifications;
once these are clarified by the author of the protocol specification, Sage can generate
protocol code automatically.Using Sage, we discover 5 instances of ambiguity and 6
instances of under-specification in the ICMP RFC; after fixing these, Sage is able
to automatically generate code that interoperates perfectly with Linux implementations.
We show that Sage generalizes to sections of BFD, IGMP, and NTP and identify additional
conceptual components that Sage needs to support to generalize to complete, complex
protocols like BGP and TCP.},
keywords = {natural language, protocol specifications},
abbr = {SIGCOMM},
pubstate = {published},
tppubtype = {inproceedings},
selected = {yes}
}

@inproceedings{10.1145/3386367.3431292,
title = {Meeting SLOs in Cross-Platform NFV},
author = {Jane Yen and Jianfeng Wang and Sucha Supittayapornpong and Marcos A M Vieira and Ramesh Govindan and Barath Raghavan},
url = {https://doi.org/10.1145/3386367.3431292},
code = {https://github.com/USC-NSL/Lemur},
slides = {https://nsl.usc.edu/wp-content/uploads/2020/11/CoNEXT20-Lemur-slides.pdf},
isbn = 9781450379489,
year  = 2020,
date = {2020-01-01},
booktitle = {Proceedings of the 16th International Conference on Emerging Networking EXperiments and Technologies},
pages = {509–523},
publisher = {Association for Computing Machinery},
address = {Barcelona, Spain},
series = {CoNEXT '20},
abstract = {Network Functions (NFs) perform on-path processing of network traffic. ISPs are deploying NF Virtualization (NFV) with software NFs run on commodity servers. ISPs aim to ensure that NF chains, directed acyclic graphs of NFs, do not violate Service Level Objectives (SLOs) promised by the ISP to its customers. To meet SLOs, NFV systems sometimes leverage on-path hardware (such as programmable switches and smart NICs) to accelerate NF execution.Lemur places and executes NF chains across heterogeneous hardware while meeting SLOs. Lemur's novel placement algorithm yields an SLO-satisfying NF placement while weighing many constraints: hardware memory and processing stages, server cores, link capacity, NF profiles, and NF chain interactions. Lemur's metacompiler automatically generates code and rules (in P4, Python, eBPF, C++, and OpenFlow) to stitch cross-platform NF chain execution while also optimizing resource usage. Our experiments show that Lemur is alone among competing strategies in meeting SLOs for canonical NF chains while maximizing marginal throughput (the traffic rate in excess of the service-level objective).},
keywords = {NFV, nsl, PISA switch, service chain},
abbr = {CoNEXT},
pubstate = {published},
tppubtype = {inproceedings}
}
