% Lemur
@inproceedings{10.1145/3386367.3431292,
title = {Meeting SLOs in Cross-Platform NFV},
author = {Jane Yen and Jianfeng Wang and Sucha Supittayapornpong and Marcos A M Vieira and Ramesh Govindan and Barath Raghavan},
url = {https://doi.org/10.1145/3386367.3431292},
code = {https://github.com/USC-NSL/Lemur},
slides = {https://nsl.usc.edu/wp-content/uploads/2020/11/CoNEXT20-Lemur-slides.pdf},
isbn = 9781450379489,
year  = 2020,
date = {2020-01-01},
booktitle = {Proceedings of the 16th International Conference on Emerging Networking EXperiments and Technologies},
pages = {509–523},
publisher = {Association for Computing Machinery},
address = {Barcelona, Spain},
series = {CoNEXT '20},
abstract = {Network Functions (NFs) perform on-path processing of network traffic. ISPs are deploying NF Virtualization (NFV) with software NFs run on commodity servers. ISPs aim to ensure that NF chains, directed acyclic graphs of NFs, do not violate Service Level Objectives (SLOs) promised by the ISP to its customers. To meet SLOs, NFV systems sometimes leverage on-path hardware (such as programmable switches and smart NICs) to accelerate NF execution.Lemur places and executes NF chains across heterogeneous hardware while meeting SLOs. Lemur's novel placement algorithm yields an SLO-satisfying NF placement while weighing many constraints: hardware memory and processing stages, server cores, link capacity, NF profiles, and NF chain interactions. Lemur's metacompiler automatically generates code and rules (in P4, Python, eBPF, C++, and OpenFlow) to stitch cross-platform NF chain execution while also optimizing resource usage. Our experiments show that Lemur is alone among competing strategies in meeting SLOs for canonical NF chains while maximizing marginal throughput (the traffic rate in excess of the service-level objective).},
keywords = {NFV, nsl, PISA switch, service chain},
abbr = {CoNEXT},
pubstate = {published},
tppubtype = {inproceedings}
}

% Galleon
@inproceedings{arxiv21-galleon,
title={Galleon: Reshaping the Square Peg of NFV}, 
author={Jianfeng Wang and Tamás Lévai and Zhuojin Li and Marcos A. M. Vieira and Ramesh Govindan and Barath Raghavan},
url = {https://arxiv.org/abs/2101.06466},
year={2021},
date = {2021-01-16},
publisher = {arXiv preprint arXiv:2101.06466},
keywords = {NFV, cloud computing, SLO},
abbr = {ArXiv},
pubstate = {published},
tppubtype = {inproceedings}
}

% Quadrant
@inproceedings{socc22-quadrant,
title={Quadrant: A Cloud-Deployable NF Virtualization Platform},
author={Jianfeng Wang and Tamás Lévai and Zhuojin Li and Marcos A. M. Vieira and Ramesh Govindan and Barath Raghavan},
url = {https://arxiv.org/abs/2101.06466},
year={2022},
date = {2022-11-07},
booktitle = {SoCC '22: Proceedings of the ACM Symposium on Cloud Computing},
abstract = {Network Functions (NFs) now touch a significant fraction of Internet traffic. The hope has been that software-based NF Virtualization (NFV) would enable rapid development of new NFs by vendors and leverage the power and economics of commodity computing infrastructure for NF deployment. To date, no cloud NFV systems achieve NF chaining, isolation, SLO-adherence, and scaling together with existing cloud computing infrastructure and abstractions, all while achieving generality, speed, and ease of deployment; these properties are taken for granted in other cloud contexts but unavailable for NF processing. We present Quadrant, an efficient and secure cloud-deployable NFV system, and show that Quadrant’s approach of adapting existing cloud infrastructure to support packet processing can achieve NF chaining, isolation, generality, and performance in NFV. Quadrant reuses common cloud infrastructure such as Kubernetes, cloud functions, the Linux kernel, NIC hardware, and switches. It enables easy NFV deployment while delivering up to double the performance per core compared to the state of the art.},
keywords = {NFV, cloud computing, SLO},
abbr = {SoCC},
pubstate = {to appear},
tppubtype = {inproceedings}
}